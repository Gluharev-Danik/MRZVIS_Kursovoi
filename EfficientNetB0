import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import models, transforms
from torch.utils.data import DataLoader, WeightedRandomSampler
from torchvision.datasets import ImageFolder
from sklearn.metrics import classification_report, confusion_matrix, f1_score, accuracy_score
import numpy as np
import matplotlib.pyplot as plt
import random
import mlflow
import mlflow.pytorch


# -----------------------------
# 1. Фиксируем seed для воспроизводимости
# -----------------------------
def set_seed(seed):
    torch.manual_seed(seed)
    torch.cuda.manual_seed_all(seed)
    np.random.seed(seed)
    random.seed(seed)
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False


set_seed(50)

# -----------------------------
# 2. Устройство
# -----------------------------
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

# -----------------------------
# 3. Параметры
# -----------------------------
img_size = (224, 224)
batch_size = 32
epochs = 5
learning_rate = 4e-5
early_stop_patience = 5
save_best_model = True
best_model_path = 'best_efficientnet.pth'

# -----------------------------
# 4. Преобразования
# -----------------------------
transform_train = transforms.Compose([
    transforms.Resize(img_size),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    transforms.RandomHorizontalFlip(p=0.5),
])

transform_test = transforms.Compose([
    transforms.Resize(img_size),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

# -----------------------------
# 5. Загрузка данных
# -----------------------------
train_dir = 'train'
val_dir = 'val'
test_dir = 'test'

train_dataset = ImageFolder(root=train_dir, transform=transform_train)
val_dataset = ImageFolder(root=val_dir, transform=transform_test)
test_dataset = ImageFolder(root=test_dir, transform=transform_test)

print("Classes:", train_dataset.class_to_idx)
print("Train samples:", len(train_dataset))
print("Val samples:", len(val_dataset))
print("Test samples:", len(test_dataset))

# -----------------------------
# 6. Балансировка классов
# -----------------------------
targets = np.array(train_dataset.targets)
class_counts = np.bincount(targets)
weights = 1. / class_counts
samples_weights = weights[targets]
sampler = WeightedRandomSampler(samples_weights, len(targets))

train_loader = DataLoader(train_dataset, batch_size=batch_size, sampler=sampler)
val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

# -----------------------------
# 7. Модель: EfficientNet-B0 + Fine-tuning
# -----------------------------
from torchvision.models import efficientnet_b0, EfficientNet_B0_Weights

# Загружаем предобученную модель
model = efficientnet_b0(weights=EfficientNet_B0_Weights.IMAGENET1K_V1)

# Разморозка всех слоёв для fine-tuning
for param in model.parameters():
    param.requires_grad = True

# Замена головы модели
model.classifier[1] = nn.Sequential(
    nn.Dropout(0.5),
    nn.Linear(1280, 1),  # Выходной размер classifier'а в EfficientNet-B0 = 1280
    nn.Sigmoid()
)

model = model.to(device)

# -----------------------------
# 8. Loss и Optimizer
# -----------------------------
class_weights_tensor = torch.tensor([class_counts[0] / class_counts[1]], device=device)
criterion = nn.BCELoss(weight=class_weights_tensor)
optimizer = optim.Adam(model.parameters(), lr=learning_rate, weight_decay=1e-5)

# -----------------------------
# 9. Early Stopping
# -----------------------------
class EarlyStopping:
    def __init__(self, patience=5):
        self.patience = patience
        self.best_loss = float('inf')
        self.counter = 0
        self.early_stop = False

    def __call__(self, val_loss):
        if val_loss < self.best_loss - 1e-4:
            self.best_loss = val_loss
            self.counter = 0
        else:
            self.counter += 1
            if self.counter >= self.patience:
                self.early_stop = True
        return self.early_stop


early_stopping = EarlyStopping(patience=early_stop_patience)

with mlflow.start_run():

    # Логируем гиперпараметры
    mlflow.log_params({
        "batch_size": batch_size,
        "learning_rate": learning_rate,
        "epochs": epochs,
        "early_stop_patience": early_stop_patience,
        "image_size": img_size,
        "class_weight_ratio": class_counts[0] / class_counts[1],
        "seed": 50
    })

    history = {'train_loss': [], 'val_loss': [], 'train_acc': [], 'val_acc': []}

    # -----------------------------
    # 11. Обучение модели
    # -----------------------------
    for epoch in range(epochs):
        model.train()
        running_loss = 0.0
        all_train_preds = []
        all_train_labels = []

        for inputs, labels in train_loader:
            inputs, labels = inputs.to(device), labels.to(device).float().unsqueeze(1)

            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)
            optimizer.step()

            running_loss += loss.item() * inputs.size(0)
            predicted = (outputs > 0.5).float().cpu().numpy()
            all_train_preds.extend(predicted)
            all_train_labels.extend(labels.cpu().numpy())

        epoch_loss = running_loss / len(train_dataset)
        epoch_acc = accuracy_score(all_train_labels, all_train_preds)
        epoch_f1 = f1_score(all_train_labels, all_train_preds)

        history['train_loss'].append(epoch_loss)
        history['train_acc'].append(epoch_acc)

        # Логируем train метрики
        mlflow.log_metrics({
            "train/loss": epoch_loss,
            "train/accuracy": epoch_acc,
            "train/f1": epoch_f1
        }, step=epoch)

        # Валидация
        model.eval()
        val_loss = 0.0
        all_val_preds = []
        all_val_labels = []

        with torch.no_grad():
            for inputs, labels in val_loader:
                inputs, labels = inputs.to(device), labels.to(device).float().unsqueeze(1)
                outputs = model(inputs)
                loss = criterion(outputs, labels)
                val_loss += loss.item() * inputs.size(0)
                predicted = (outputs > 0.5).float().cpu().numpy()
                all_val_preds.extend(predicted)
                all_val_labels.extend(labels.cpu().numpy())

        val_loss /= len(val_dataset)
        val_acc = accuracy_score(all_val_labels, all_val_preds)
        val_f1 = f1_score(all_val_labels, all_val_preds)

        history['val_loss'].append(val_loss)
        history['val_acc'].append(val_acc)

        # Логируем val метрики
        mlflow.log_metrics({
            "val/loss": val_loss,
            "val/accuracy": val_acc,
            "val/f1": val_f1
        }, step=epoch)

        print(f"Epoch {epoch + 1}/{epochs} | "
              f"Train Loss: {epoch_loss:.4f}, Acc: {epoch_acc:.4f}, F1: {epoch_f1:.4f} | "
              f"Val Loss: {val_loss:.4f}, Acc: {val_acc:.4f}, F1: {val_f1:.4f}")

        # Early stopping
        if early_stopping(val_loss):
            print("Early stopping triggered.")
            break

    # -----------------------------
    # 12. Тестирование
    # -----------------------------
    model.eval()
    test_loss = 0.0
    all_test_preds = []
    all_test_labels = []

    with torch.no_grad():
        for inputs, labels in test_loader:
            inputs, labels = inputs.to(device), labels.to(device).float().unsqueeze(1)
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            test_loss += loss.item() * inputs.size(0)
            predicted = (outputs > 0.5).float().cpu().numpy()
            all_test_preds.extend(predicted)
            all_test_labels.extend(labels.cpu().numpy())

    test_loss /= len(test_loader)
    test_acc = accuracy_score(all_test_labels, all_test_preds)
    test_f1 = f1_score(all_test_labels, all_test_preds)

    # Логируем тестовые метрики
    mlflow.log_metrics({
        "test/loss": test_loss,
        "test/accuracy": test_acc,
        "test/f1": test_f1
    })

    print(f"\nTest Loss: {test_loss:.4f}, Test Accuracy: {test_acc:.4f}, Test F1: {test_f1:.4f}")

    # -----------------------------
    # 13. Сохранение модели
    # -----------------------------
    mlflow.pytorch.log_model(model, "model")

# -----------------------------
# 14. Графики обучения
# -----------------------------
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.plot(history['train_acc'], label='Train Accuracy')
plt.plot(history['val_acc'], label='Val Accuracy')
plt.title('Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history['train_loss'], label='Train Loss')
plt.plot(history['val_loss'], label='Val Loss')
plt.title('Loss')
plt.legend()

plt.show()
